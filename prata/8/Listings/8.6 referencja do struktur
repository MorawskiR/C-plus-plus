

#include <iostream>
#include <vector>
using namespace std;
struct free_throws
{
	std::string name;
	int made;
	int attempts;
	float percent ;
};

void display(const free_throws& ft);
void set_pc(free_throws& ft);
free_throws& accumulate(free_throws& target, const free_throws& source);

int main()
{
	free_throws one = { "bielsa", 13, 14 };
	free_throws two = { "nyga", 10, 16 }; 
	free_throws three = { "adam", 7, 9 };
	free_throws four = { "adam", 5, 9 };
	free_throws five = { "adam", 6, 14 };
	free_throws team = { "goodthrow", 0,0 };
	free_throws dup;

	set_pc(one);
	//set_pc(two);
	display(one);
	accumulate(team, one);
	display(team);

	display(accumulate(team, two));
	accumulate(accumulate(team, three), four);
	display(team);
	dup = accumulate(team, five);
	cout << "statystyka dla team";
	display(team);
	cout << "statystyka dla dup po przypisaniu" << endl;
	display(dup);
	set_pc(four);
	accumulate(dup, five) = four;
	cout << "omylkowe przypisanie";
	display(dup);
}
void display(const free_throws& ft)
{
	using std::cout;
	using std::endl;
	cout <<"imie: "<< ft.name << endl;
	cout <<"trafionych: "<< ft.made << endl;
	cout <<"rzutÃ³w: "<< ft.attempts << endl;
	cout << "skutecznosc: "<<ft.percent << endl;
}
void set_pc(free_throws& ft)
{
	if (ft.attempts != 0)
	{
		ft.percent = 100.f * float(ft.made) / float(ft.attempts);
	}
	else
	{
		ft.percent = 0;
	}
	cout << "wyszlo";
}
free_throws& accumulate(free_throws& target, const free_throws& source)
{
	target.attempts += source.attempts;
	target.made += source.made;
	set_pc(target);
	return target;
}
